
@import url('https://fonts.googleapis.com/css2?family=Lato:wght@400;900&display=swap');
/*
* {
  -webkit-tap-highlight-color: rgba(0,0,0,0);
}*/
:root {
  --c0: 0,0,0;
  --c1: #3a405a;
  --c2: #aec5eb;
  --c3: #f9dec9;
  --c4: #e9afa3;
  --c5: #685044;
  --picked: #e9afa3;
  /*
  --c1: #223843;
  --c2: #eff1f3;
  --c3: #dbd3d8;
  --c4: #d8b4a0;
  --c5: #d77a61;
  */
}
.material-icons {
  user-select: none;
  -moz-user-select: none;
  -khtml-user-select: none;
  -webkit-user-select: none;   
  -o-user-select: none; 
  margin: 0;
}

/*
 * -- BASE STYLES --
 * Most of these are inherited from Base, but I want to change a few.
 */
 input,
textarea,
button,
select,
a {
  -webkit-tap-highlight-color: rgba(0,0,0,0);
}
button {
  -webkit-tap-highlight-color: rgba(255, 255, 255, 0) !important; 
  -webkit-focus-ring-color: rgba(255, 255, 255, 0) !important; 
  outline: none !important;
  user-select: none;
  -moz-user-select: none;
  -khtml-user-select: none;
  -webkit-user-select: none;   
  -o-user-select: none;
} 
body {
  width: 100%;
  height: 100vh;
  background-color: var(--c1);
  color: var(--c2);
  font-family: 'Helvetica', sans-serif;
  overflow: hidden;
}
a {
  float:right;
  text-decoration: none;
  color: var(--c2);
  font-size: 220% !important;
}
p {
  padding: 0;
  margin: 0;
  margin-left: 8px;
  font-size: 500%;
}
#hello {
  margin-top: 8px;
  margin-left: 9px;
  font-size: 200%;
  display: none;
}
#namehello {
  font-size: 400%;
  display: none;
}
#totalhello {
  margin-top: 8px;
  font-size: 200%;
  display: block;
}
.primary-button,
.secondary-button {
  -webkit-box-shadow: none;
  -moz-box-shadow: none;
  box-shadow: none;
  border-radius: 20px;
}
.primary-button {
  color: var(--c1);
  background: #1b98f8;
  margin: 1em 0;
}
.secondary-button {
  background: var(--c1);
  border: 1px solid #ddd;
  color: #666;
  padding: 0.5em 2em;
  font-size: 80%;
}


.buttonHolder {
  vertical-align: top;
  display: inline-block;
  flex-grow: 1;
  margin-top: 8px;
  margin-right: 8px;
}
.buttonHolder > a {
  color: var(--c2);
}
.titleHolder {
  vertical-align: top;
  display: inline-block;
}
.header {
  vertical-align: top;
  display: flex;
  background-color: var(--c1);
}
hr.headerHr {
  border: 2px solid rgb(var(--c0));
  opacity: 0.15;
}
hr.activityHr {
  margin-top: 15px;
  border: 2px solid rgb(var(--c0));
  opacity: 0;
}
.activity {
  width: 75px;
  height: 75px;
  outline: solid 3px var(--c1);
  outline-offset: 3px;
  margin-top: 10px;
}


.material-symbols-outlined {
  user-select: none;
  -moz-user-select: none;
  -khtml-user-select: none;
  -webkit-user-select: none;   
  -o-user-select: none; 
  margin: 0;

  font-variation-settings:
  'FILL' 1,
  'wght' 300,
  'GRAD' 0,
  'opsz' 40
}

/* Activity Styling */
.activityButton {
  margin-left: 8px;
  width: 57px;
  height: 57px;
  display: flex;
  justify-content: center; 
  align-items: center;
  background-color: var(--c1);
  outline: solid 3px var(--c2);
  outline-offset: 0px;
  border-radius: 25%;
  transition: transform 0.2s, outline-offset 0.2s;
}
.activityButton[data-big="0"] {
  display: inline-flex;
  margin-top: 5px;
  white-space: nowrap;
}
.activityButton[data-selected="1"] {
  transform: scale(calc(1 / 1.16));
}
.activityDisc {
  width: 50px;
  height: 50px;
  border-radius: 25%;
  display: flex;
  justify-content: center; 
  align-items: center;
  transition: transform 0.2s, outline-offset 0.2s;
}
.activityButton[data-big="1"] > .activityDisc {
  width: 65px;
  height: 65px;
}
.activityButton[data-big="1"] {
  display: inline-flex;
  width: 73px;
  height: 73px;
}
.activityButton[data-selected="1"] > .activityDisc {
  transform: scale(1.25);
  outline-offset: 3px;
}

.activityButton[data-big="1"] > .activityDisc > span {
  transform:scale(1.3);
}



.activityText {
  display: inline-block;
  text-align: center;
  font-size: 20%;
  position: relative;
  top: 0px;
  margin-left: 25px;
}
.activityText > * {
  margin: 0;
  padding: 0;
}
#activityText2 {
  display: inline;
  font-weight: bold;
}
#activityText3 {
  display: inline;
}
#activityText4 {
  display: inline;
  font-weight: bold;
}
.currentActivity {
  margin-top: 15px;
  position: relative;
  top: 10px;
  margin-left: 8px;
}

.pickActivity {
  margin-top: 35px;
}
.activitySlider {
  overflow-x: auto;
  overflow-y: hidden;
  height: 75px;
  white-space: nowrap;
  margin-left: 5px;
  margin-right: 5px;
  padding-right: 5px;
}
.deleteConfirm {
  position: relative;
  top: 25px;
  font-size: 120%;
  text-align: center;
}
.activityTexts {
  margin-top: 15px;
  height: 460px;
  overflow-y: auto;
  overflow-x: none;
}
.categoryName {
  position: relative;
  top: 10px;
  left: 2px;
  color: var(--c2);
  font-size: 200%;
}
.activityTextPick {
  font-size: 130%;
  margin-left: 10px;
  margin-top: 10px;
  margin-bottom: 10px;
  padding-top: 10px;
  padding-bottom: 10px;
  padding-left: -20px;
  text-align:left;
  background-color: #00000025;
  color: var(--c2);
  position: relative;
  border-bottom-left-radius: 15px;
  border-top-left-radius: 15px;

  transition: padding-left 0.2s, color 0.2s, background-color 0.2s, font-size 0.2s, transform 0.2s;
}
.activityTextPick:hover {
  color: var(--picked);
  padding-left: 20px;
}
.activityTextPick::before {
  position: relative;
  top: 3px;
  font-family: "Material Icons";
  content: "check ";
  transition: font-size 0.2s, transform 0.2s, opacity 0.2s, width 0.2s;
  opacity: 0;
}
.activityTextPick:hover::before {
  opacity: 1;
}
#addActivityText:hover {
  color: var(--c2);
  padding-left: 0px;
}
#addActivityText:hover::before {
  opacity: 0;
}
#title {

}
#addActivityText {
  text-align: center;
}
#windowBackground {
  width: 5000%;
  height: 5000%;
  position: absolute;
  background-color: #000000;
  opacity: 0;
  transition: opacity 0.4s;
  left: 50%;
  right: 50%;
  transform: scale(1) translate(-50%, -50%);
  pointer-events: none;
  z-index: 3;
}
#windowBackground[data-active="1"] {
  opacity: 0.5;
  pointer-events: unset;
}
.window {
  border-radius: 9px;
  background-color: var(--c1);
  outline: solid 3px var(--c2);
  outline-offset: 3px;
  position: absolute;
  height: min(200px, 50%);
  left: 50%;
  top: 50%;
  opacity: 0;
  width: 0%;
  transform: translate(-50%, -50%);
  display: flex;
  flex-direction: column;
  transition: opacity 0.4s, transform 0.4s, width 0.4s, outline 0.8s, outline-offset 0.8s, top 0.4s;
  pointer-events:none;
  z-index: 4;
}
.window[data-open="1"] {
  pointer-events:all;
  outline: solid 3px var(--c2);
  outline-offset: 3px;
  width: calc(100% - 26px);
  transform: translate(-50%, -50%);
  opacity: 1;
}

#windowsParent[data-keyboard="1"] > .window[data-form="1"] {
  top: 25%;
}
#window_addText {
  height: min(120px, 50%);
}
#window_chooseIcon {
  height: min(230px, 50%);
}
#window_deleteConfirmation {
  height: min(130px, 50%);
}
.iconListIcon {
  transform: scale(1);
  color: var(--c2);
  opacity: 1;
  margin: 6px;
  height: 25.6px;
  width: 25.6px;
}
.chooseIcon_iconList {
  margin-right: 4px;
  position: relative;
  left: 5px;
  margin-top: 5px;
  text-align: center;
  height: 168px;
  width: 96%;
  overflow-x: none;
  overflow-y: scroll;
}
label {
  width: calc(100% - 23px) !important;
  margin-left: 8px;
  margin-top: -8px;
}
input {
  width: calc(100% - 23px) !important;
}

.windowBottom {
  margin-top: auto;
}
.windowbuttons {
  width: 100%;
  display:flex;
}
hr.windowHr {
  border: 2px solid rgb(var(--c0));
  opacity: 0.15;
  margin: 0;
}
.windowVr {
  background-color: rgb(var(--c0));
  opacity: 0.15;
  width: 4px;
  flex-grow: 4px;
  position: relative;
  /*transform: scaleY(1.2);
  bottom: 3px;*/
}
button.button {
  width: 200px;
  margin: 0;
  padding: 0.75rem 1rem;
	border: 0;
	border-radius: 0.317rem;
	background-color: var(--c1);
	color: var(--c2);
	text-decoration: none;
	font-weight: 700;
	font-size: 1rem;
  line-height: 1.5;
	cursor: pointer;
	-webkit-appearance: none;
	-webkit-font-smoothing: antialiased;
  flex-grow: 1;
  transition: filter 0.2s, font-size 0.4s;

}
.button:active:hover {
  filter: brightness(0.95);
}

.button:focus {
	outline: thin dotted #444;
	outline: 5px auto -webkit-focus-ring-color;
	outline-offset: -2px;
}
.window[data-open="0"] > .windowBottom > .windowbuttons > button.button{
  font-size: 0;
}

.iconChooseIcon {
  display:block;
  text-align:center;
  position: relative;
  right: 10px;
}
.iconChooseText {
  font-size: 90%;
  text-align: center;
}
.iconChoose {
  width: 60px;
  margin-top: 7px;
}

.colorChooseIcon {
  display:block;
  text-align:center;
  position: relative;
  width: 32px;
  height: 32px;
  left: 16px;
  appearance: none;
  -moz-appearance: none;
  -webkit-appearance: none;
  background: none;
  border: 0;
  cursor: pointer;
  padding-left: 0;
  padding-right: 0;
  padding-top: -4px;
  padding-bottom: -4px;
  transform: scaleY(1.3) scaleX(0.85);
}
.colorChooseText {
  font-size: 90%;
  text-align: center;
  position: relative;
  top: 1px;
}
.colorChoose {
  width: 60px;
  margin-top: 7px;
}
.choosersTab {
  margin-left: 0px;
  margin-right: 106px;
  vertical-align: bottom;
  text-align: center;
  position: relative;
  left: 50%;
  opacity: 0;
  transform: translateX(-50%) scale(0.9);
  display: flex;
  justify-content: space-between;
  transition: transform 0.4s opacity 0.4s;

}

.window[data-open="1"] > .choosersTab {
  transforM: translateX(-50%);
  opacity: 1;
}
/* Media Adjustments */

@media only screen and (max-width :480px) { 
  #hello {
    display: block;
  }
  #namehello {
    display: block;
  }
  #totalhello {
    display: none;
  }
  .buttonHolder > a {
    color: var(--c2);
  }
  .material-icons {
    font-size: 200% !important;
    /*
    font-family: 'Material Symbols Outlined' !important;
    font-variation-settings:
    'FILL' 1,
    'wght' 300,
    'GRAD' 0,
    'opsz' 40
    */
  }
}
/* ===== Scrollbar CSS ===== */
  /* Firefox */
  * {
    scrollbar-width: 4px;
    scrollbar-color: #00000077 #00000000;
  }

  /* Chrome, Edge, and Safari */
  *::-webkit-scrollbar {
    height: 4px;
    width: 4px;
  }

  *::-webkit-scrollbar-thumb {
    
    scrollbar-width: 3px;
    height: 2px;
    background-color: #00000077;
    border-radius: 14px;
  }

  /* ======= Input & Other CSS ===========*/

  .field {
    position: relative;
    font-size: 14px;
    border-top: 20px solid transparent;
    margin-bottom: 5px;
    display: inline-block;
    --field-padding: 12px;
    color: var(--c2) !important;
  }
  input {
    color: var(--c2) !important;
  }
  
  .field input {
    border: none;
    -webkit-appearance: none;
    -ms-appearance: none;
    -moz-appearance: none;
    appearance: none;
    background: #f2f2f2;
    padding: var(--field-padding);
    border-radius: 3px;
    width: 250px;
    outline: none;
    font-size: 14px;
  }
  
  .field .placeholder {
    position: absolute;
    left: var(--field-padding);
    width: calc(100% - (var(--field-padding) * 2));
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    top: 22px;
    line-height: 100%;
    transform: translateY(-50%);
    color: var(--c2);
    opacity: 0.5;
    transition: 
      top 0.3s ease,
      color 0.3s ease,
      font-size 0.3s ease;
  }
  
  .field input.dirty + .placeholder,
  .field input:focus + .placeholder,
  .field input:not(:placeholder-shown) + .placeholder {
    top: -10px;
    font-size: 10px;
    color: var(--c2);
    opacity: 1;
  }
  
  .field .error-message {
    width: 100%;
    display: flex;
    align-items: center;
    padding: 0 8px;
    font-size: 12px;
    background: #d30909;
    color: var(--c2);
    height: 24px;
  }
  
  .field .error-message:empty {
    opacity: 0;
  }
  
  /* ONE */
  .field.modern input {
    background: none;
    border: 2px solid rgba(var(--c0), 0.1);
    transition: border-color 0.3s ease;
  }
  
  .field.modern input + .placeholder {
    left: 8px;
    padding: 0 5px;
  }
  
  .field.modern input.dirty,
  .field.modern input:not(:placeholder-shown),
  .field.modern input:focus {
    border-color: var(--c2); /*rgba(var(--c0), 0.5);*/
    transition-delay: 0.1s
  }
  
  .field.modern input.dirty + .placeholder,
  .field.modern input:not(:placeholder-shown) + .placeholder,
  .field.modern input:focus + .placeholder {
    top: 0;
    font-size: 10px;
    color: var(--c2);
    background: var(--c1);
    width: auto
  }
  #input_searchicons {
  }


  
.field.search {
  --draw-duration: 0.1s;
  --draw-color: #222;
  --draw-line-width: 2px;
  --draw-easing: linear;
}

.field.search .border {
  width: 100%;
  height: 100%;
  position: absolute;
  left: 0;
  top: 0;
  transform: none;
  display: flex;
  align-items: center;
  padding-left: 12px;
  border-radius: 3px;
}

.field.search .border::after, 
.field.search .border::before {
  content: "";
  width: 0;
  height: 0;
  display: inline-block;
  position: absolute;
  border-radius: 3px;
}

.field.search .border::before {
  left: 0;
  bottom: 0;
  border-right: 0px solid var(--draw-color);
  border-bottom: 0px solid var(--draw-color);
  transition: 
    border 0s linear calc(var(--draw-duration) * 4),
    height var(--draw-duration) var(--draw-easing) calc(var(--draw-duration) * 2),
    width var(--draw-duration) var(--draw-easing) calc(var(--draw-duration) * 3);
}

.field.search .border::after {
  right: 0;
  top: 0;
  border-left: 0px solid var(--draw-color);
  border-top: 0px solid var(--draw-color);
  transition: 
    border 0s linear calc(var(--draw-duration) * 2),
    height var(--draw-duration) var(--draw-easing),
    width var(--draw-duration) var(--draw-easing) var(--draw-duration);
}

.field.search input:focus ~ .border::before,
.field.search input:not(:placeholder-shown) ~ .border::before,
.field.search input.dirty ~ .border::before,
.field.search input:focus ~ .border::after,
.field.search input:not(:placeholder-shown) ~ .border::after,
.field.search input.dirty ~ .border::after {
  width: 100%;
  height: 100%;
  border-width: var(--draw-line-width);
}

.field.search input:not(:placeholder-shown) ~ .border::before,
.field.search input.dirty ~ .border::before,
.field.search input:focus ~ .border::before {
  transition-delay: 0s, var(--draw-duration), 0s;
}

.field.search input:not(:placeholder-shown) ~ .border::after,
.field.search input.dirty ~ .border::after,
.field.search input:focus ~ .border::after {
  transition-delay: 
    calc(var(--draw-duration) * 2), 
    calc(var(--draw-duration) * 3), 
    calc(var(--draw-duration) * 2);
}